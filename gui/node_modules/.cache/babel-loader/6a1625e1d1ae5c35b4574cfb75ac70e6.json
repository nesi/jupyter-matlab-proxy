{"ast":null,"code":"// Copyright 2020 The MathWorks, Inc.\nimport { createSelector } from 'reselect';\nexport const selectTutorialHidden = state => state.tutorialHidden;\nexport const selectServerStatus = state => state.serverStatus;\nexport const selectMatlabStatus = state => state.serverStatus.matlabStatus;\nexport const selectMatlabVersion = state => state.serverStatus.matlabVersion;\nexport const selectSubmittingServerStatus = state => state.serverStatus.isSubmitting;\nexport const selectHasFetchedServerStatus = state => state.serverStatus.hasFetched;\nexport const selectLicensingInfo = state => state.serverStatus.licensingInfo;\nexport const selectLoadUrl = state => state.loadUrl;\nexport const selectServerStatusFetchFailCount = state => state.serverStatus.fetchFailCount;\nexport const selectError = state => state.error;\nexport const selectTriggerPosition = createSelector(state => state.triggerPosition, pos => pos === null ? undefined : pos);\nexport const selectIsError = createSelector(selectError, error => error !== null);\nexport const selectIsConnectionError = createSelector(selectServerStatusFetchFailCount, fails => fails >= 5);\nexport const selectMatlabUp = createSelector(selectMatlabStatus, matlabStatus => matlabStatus === 'up');\nexport const selectMatlabRunning = createSelector(selectMatlabStatus, matlabStatus => matlabStatus === 'up' || matlabStatus === 'starting');\nexport const selectOverlayHidable = createSelector(selectMatlabStatus, selectIsError, (matlabStatus, isError) => matlabStatus === 'up' && !isError);\nexport const selectOverlayVisibility = createSelector(state => state.overlayVisibility, selectMatlabUp, selectIsError, (visibility, matlabUp, isError) => !matlabUp || visibility || isError);\nexport const getFetchAbortController = createSelector(selectServerStatus, serverStatus => serverStatus.fetchAbortController);\nexport const selectFetchStatusPeriod = createSelector(selectMatlabStatus, selectSubmittingServerStatus, (matlabStatus, isSubmitting) => {\n  if (isSubmitting) {\n    return null;\n  } else if (matlabStatus === 'up') {\n    return 10000;\n  }\n\n  return 5000;\n});\nexport const selectLicensingProvided = createSelector(selectLicensingInfo, licensingInfo => Object.prototype.hasOwnProperty.call(licensingInfo, 'type'));\nexport const selectLicensingIsMhlm = createSelector(selectLicensingInfo, selectLicensingProvided, (licensingInfo, licensingProvided) => licensingProvided && licensingInfo.type === 'MHLM');\nexport const selectLicensingMhlmUsername = createSelector(selectLicensingInfo, selectLicensingIsMhlm, (licensingInfo, isMhlm) => isMhlm ? licensingInfo.emailAddress : ''); // TODO Are these overkill? Perhaps just selecting status would be enough\n// TODO Could be used for detected intermedia failures, such as server being\n// temporarily inaccessible\n\nexport const selectMatlabPending = createSelector(selectMatlabStatus, matlabStatus => matlabStatus === 'starting');\nexport const selectOverlayVisible = createSelector(selectOverlayVisibility, selectIsError, (visibility, isError) => visibility || isError);\nexport const selectInformationDetails = createSelector(selectMatlabStatus, selectIsError, (status, isError) => {\n  switch (status) {\n    case 'up':\n      return {\n        label: 'Running',\n        icon: 'success',\n        alert: 'success'\n      };\n\n    case 'starting':\n      return {\n        label: 'Starting. This may take several minutes.',\n        icon: 'info-reverse',\n        alert: 'info',\n        spinner: true\n      };\n\n    case 'down':\n      const detail = {\n        label: 'Not running',\n        icon: 'info-reverse',\n        alert: 'info'\n      };\n\n      if (isError) {\n        detail.icon = 'error';\n        detail.alert = 'danger';\n      }\n\n      return detail;\n\n    default:\n      throw new Error(`Unknown MATLAB status: \"${status}\".`);\n  }\n});","map":{"version":3,"sources":["/scale_wlg_persistent/filesets/project/nesi99999/Callum/jupyter-matlab-proxy/gui/src/selectors/index.js"],"names":["createSelector","selectTutorialHidden","state","tutorialHidden","selectServerStatus","serverStatus","selectMatlabStatus","matlabStatus","selectMatlabVersion","matlabVersion","selectSubmittingServerStatus","isSubmitting","selectHasFetchedServerStatus","hasFetched","selectLicensingInfo","licensingInfo","selectLoadUrl","loadUrl","selectServerStatusFetchFailCount","fetchFailCount","selectError","error","selectTriggerPosition","triggerPosition","pos","undefined","selectIsError","selectIsConnectionError","fails","selectMatlabUp","selectMatlabRunning","selectOverlayHidable","isError","selectOverlayVisibility","overlayVisibility","visibility","matlabUp","getFetchAbortController","fetchAbortController","selectFetchStatusPeriod","selectLicensingProvided","Object","prototype","hasOwnProperty","call","selectLicensingIsMhlm","licensingProvided","type","selectLicensingMhlmUsername","isMhlm","emailAddress","selectMatlabPending","selectOverlayVisible","selectInformationDetails","status","label","icon","alert","spinner","detail","Error"],"mappings":"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","sourcesContent":["// Copyright 2020 The MathWorks, Inc.\n\nimport { createSelector } from 'reselect';\n\nexport const selectTutorialHidden = state => state.tutorialHidden;\nexport const selectServerStatus = state => state.serverStatus;\nexport const selectMatlabStatus = state => state.serverStatus.matlabStatus;\nexport const selectMatlabVersion = state => state.serverStatus.matlabVersion;\nexport const selectSubmittingServerStatus = state => state.serverStatus.isSubmitting;\nexport const selectHasFetchedServerStatus = state => state.serverStatus.hasFetched;\nexport const selectLicensingInfo = state => state.serverStatus.licensingInfo;\nexport const selectLoadUrl = state => state.loadUrl;\nexport const selectServerStatusFetchFailCount = state => state.serverStatus.fetchFailCount;\nexport const selectError = state => state.error;\n\nexport const selectTriggerPosition = createSelector(\n    state => state.triggerPosition,\n    pos => pos === null ? undefined : pos\n);\n\nexport const selectIsError = createSelector(\n    selectError,\n    error => error !== null\n);\n\nexport const selectIsConnectionError = createSelector(\n    selectServerStatusFetchFailCount,\n    fails => fails >= 5\n);\n\nexport const selectMatlabUp = createSelector(\n    selectMatlabStatus,\n    matlabStatus => matlabStatus === 'up'\n);\n\nexport const selectMatlabRunning = createSelector(\n    selectMatlabStatus,\n    matlabStatus => matlabStatus === 'up' || matlabStatus === 'starting'\n);\n\nexport const selectOverlayHidable = createSelector(\n    selectMatlabStatus,\n    selectIsError,\n    (matlabStatus, isError) => (matlabStatus === 'up' && !isError)\n);\n\nexport const selectOverlayVisibility = createSelector(\n    state => state.overlayVisibility,\n    selectMatlabUp,\n    selectIsError,\n    (visibility, matlabUp, isError) => (\n        !matlabUp || visibility || isError\n    )\n);\n\nexport const getFetchAbortController = createSelector(\n    selectServerStatus,\n    serverStatus => serverStatus.fetchAbortController\n);\n\nexport const selectFetchStatusPeriod = createSelector(\n    selectMatlabStatus,\n    selectSubmittingServerStatus,\n    (matlabStatus, isSubmitting) => {\n        if (isSubmitting) {\n            return null;\n        } else if (matlabStatus === 'up') {\n            return 10000;\n        }\n        return 5000;\n    }\n);\n\nexport const selectLicensingProvided = createSelector(\n    selectLicensingInfo,\n    licensingInfo => Object.prototype.hasOwnProperty.call(licensingInfo, 'type')\n);\n\nexport const selectLicensingIsMhlm = createSelector(\n    selectLicensingInfo,\n    selectLicensingProvided,\n    (licensingInfo, licensingProvided) => licensingProvided && licensingInfo.type === 'MHLM'\n);\n\nexport const selectLicensingMhlmUsername = createSelector(\n    selectLicensingInfo,\n    selectLicensingIsMhlm,\n    (licensingInfo, isMhlm) => isMhlm ? licensingInfo.emailAddress : ''\n);\n\n// TODO Are these overkill? Perhaps just selecting status would be enough\n// TODO Could be used for detected intermedia failures, such as server being\n// temporarily inaccessible\nexport const selectMatlabPending = createSelector(\n    selectMatlabStatus,\n    matlabStatus => matlabStatus === 'starting'\n);\n\nexport const selectOverlayVisible = createSelector(\n    selectOverlayVisibility,\n    selectIsError,\n    (visibility, isError) => (visibility || isError)\n);\n\nexport const selectInformationDetails = createSelector(\n    selectMatlabStatus,\n    selectIsError,\n    (status, isError) => {\n\n        switch (status) {\n            case 'up':\n                return {\n                    label: 'Running',\n                    icon: 'success',\n                    alert: 'success'\n                };\n            case 'starting':\n                return {\n                    label: 'Starting. This may take several minutes.',\n                    icon: 'info-reverse',\n                    alert: 'info',\n                    spinner: true\n                };\n            case 'down':\n                const detail = {\n                    label: 'Not running',\n                    icon: 'info-reverse',\n                    alert: 'info'\n                };\n                if (isError) {\n                    detail.icon = 'error';\n                    detail.alert = 'danger';\n                }\n                return detail;\n            default:\n                throw new Error(`Unknown MATLAB status: \"${status}\".`);\n        }\n\n    }\n);\n"]},"metadata":{},"sourceType":"module"}