{"ast":null,"code":"// Copyright 2020 The MathWorks, Inc.\nimport { SET_TRIGGER_POSITION, SET_TUTORIAL_HIDDEN, SET_OVERLAY_VISIBILITY, REQUEST_SERVER_STATUS, RECEIVE_SERVER_STATUS, REQUEST_SET_LICENSING, REQUEST_TERMINATE_INTEGRATION, REQUEST_STOP_MATLAB, REQUEST_START_MATLAB, RECEIVE_SET_LICENSING, RECEIVE_TERMINATE_INTEGRATION, RECEIVE_STOP_MATLAB, RECEIVE_START_MATLAB, RECEIVE_ERROR } from '../actions';\nimport { getFetchAbortController, selectMatlabPending } from '../selectors';\nexport function setTriggerPosition(x, y) {\n  return {\n    type: SET_TRIGGER_POSITION,\n    x,\n    y\n  };\n}\nexport function setTutorialHidden(hidden) {\n  return {\n    type: SET_TUTORIAL_HIDDEN,\n    hidden\n  };\n}\nexport function setOverlayVisibility(visibility) {\n  return {\n    type: SET_OVERLAY_VISIBILITY,\n    visibility\n  };\n}\nexport function requestServerStatus(fetchAbortController) {\n  return {\n    type: REQUEST_SERVER_STATUS,\n    fetchAbortController\n  };\n}\nexport function receiveServerStatus(status) {\n  return function (dispatch, getState) {\n    return dispatch({\n      type: RECEIVE_SERVER_STATUS,\n      status,\n      previousMatlabPending: selectMatlabPending(getState())\n    });\n  };\n}\nexport function requestSetLicensing(fetchAbortController) {\n  return {\n    type: REQUEST_SET_LICENSING,\n    fetchAbortController\n  };\n}\nexport function receiveSetLicensing(status) {\n  return {\n    type: RECEIVE_SET_LICENSING,\n    status\n  };\n}\nexport function requestTerminateIntegration(fetchAbortController) {\n  return {\n    type: REQUEST_TERMINATE_INTEGRATION,\n    fetchAbortController\n  };\n}\nexport function receiveTerminateIntegration(status) {\n  return {\n    type: RECEIVE_TERMINATE_INTEGRATION,\n    status,\n    loadUrl: '../'\n  };\n}\nexport function requestStopMatlab(fetchAbortController) {\n  return {\n    type: REQUEST_STOP_MATLAB,\n    fetchAbortController\n  };\n}\nexport function receiveStopMatlab(status) {\n  return {\n    type: RECEIVE_STOP_MATLAB,\n    status\n  };\n}\nexport function requestStartMatlab(fetchAbortController) {\n  return {\n    type: REQUEST_START_MATLAB,\n    fetchAbortController\n  };\n}\nexport function receiveStartMatlab(status) {\n  return {\n    type: RECEIVE_START_MATLAB,\n    status\n  };\n} // TODO Probably no need for multiple actions/action creators for fetch\n// failures?\n\nexport function receiveError(error) {\n  return {\n    type: RECEIVE_ERROR,\n    error\n  };\n}\nexport function fetchServerStatus() {\n  return async function (dispatch, getState) {\n    // Abort any previous request which is in-flight\n    getFetchAbortController(getState()).abort(); // Create new AbortController\n\n    const abortController = new AbortController(); // Set this request as in-flight\n\n    dispatch(requestServerStatus(abortController));\n\n    try {\n      const res = await fetch('./get_status', {\n        signal: abortController.signal\n      });\n      const data = await res.json();\n      return dispatch(receiveServerStatus(data));\n    } catch (e) {\n      dispatch(receiveError('Communication with server failed.'));\n    }\n  };\n}\nexport function fetchSetLicensing(info) {\n  return async function (dispatch, getState) {\n    // Abort any previous request which is in-flight\n    getFetchAbortController(getState()).abort(); // Create new AbortController\n\n    const abortController = new AbortController(); // Set this request as in-flight\n\n    dispatch(requestSetLicensing(abortController));\n\n    try {\n      const res = await fetch('./set_licensing_info', {\n        method: 'PUT',\n        mode: 'same-origin',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(info),\n        signal: abortController.signal\n      });\n      const data = await res.json();\n      return dispatch(receiveSetLicensing(data));\n    } catch (e) {\n      dispatch(receiveError('Communication with server failed.'));\n    }\n  };\n}\nexport function fetchUnsetLicensing() {\n  return async function (dispatch, getState) {\n    // Abort any previous request which is in-flight\n    getFetchAbortController(getState()).abort(); // Create new AbortController\n\n    const abortController = new AbortController(); // Set this request as in-flight\n\n    dispatch(requestSetLicensing(abortController));\n\n    try {\n      const res = await fetch('./set_licensing_info', {\n        method: 'DELETE',\n        mode: 'same-origin',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        signal: abortController.signal\n      });\n      const data = await res.json();\n      return dispatch(receiveSetLicensing(data));\n    } catch (e) {\n      dispatch(receiveError('Communication with server failed.'));\n    }\n  };\n}\nexport function fetchTerminateIntegration() {\n  return async function (dispatch, getState) {\n    // Abort any previous request which is in-flight\n    getFetchAbortController(getState()).abort(); // Create new AbortController\n\n    const abortController = new AbortController(); // Set this request as in-flight\n\n    dispatch(requestTerminateIntegration(abortController));\n\n    try {\n      const res = await fetch('./terminate_integration', {\n        method: 'DELETE',\n        mode: 'same-origin',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        signal: abortController.signal\n      });\n      const data = await res.json();\n      return dispatch(receiveTerminateIntegration(data));\n    } catch (e) {\n      dispatch(receiveError('Communication with server failed.'));\n    }\n  };\n}\nexport function fetchStopMatlab() {\n  return async function (dispatch, getState) {\n    // Abort any previous request which is in-flight\n    getFetchAbortController(getState()).abort(); // Create new AbortController\n\n    const abortController = new AbortController(); // Set this request as in-flight\n\n    dispatch(requestStopMatlab(abortController));\n\n    try {\n      const res = await fetch('./stop_matlab', {\n        method: 'DELETE',\n        mode: 'same-origin',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        signal: abortController.signal\n      });\n      const data = await res.json();\n      return dispatch(receiveStopMatlab(data));\n    } catch (e) {\n      dispatch(receiveError('Communication with server failed.'));\n    }\n  };\n}\nexport function fetchStartMatlab() {\n  return async function (dispatch, getState) {\n    // Abort any previous request which is in-flight\n    getFetchAbortController(getState()).abort(); // Create new AbortController\n\n    const abortController = new AbortController(); // Set this request as in-flight\n\n    dispatch(requestStartMatlab(abortController));\n\n    try {\n      const res = await fetch('./start_matlab', {\n        method: 'PUT',\n        mode: 'same-origin',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        signal: abortController.signal,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({})\n      });\n      const data = await res.json();\n      return dispatch(receiveStartMatlab(data));\n    } catch (e) {\n      dispatch(receiveError('Communication with server failed.'));\n    }\n  };\n}","map":{"version":3,"sources":["/scale_wlg_persistent/filesets/project/nesi99999/Callum/jupyter-matlab-proxy/gui/src/actionCreators/index.js"],"names":["SET_TRIGGER_POSITION","SET_TUTORIAL_HIDDEN","SET_OVERLAY_VISIBILITY","REQUEST_SERVER_STATUS","RECEIVE_SERVER_STATUS","REQUEST_SET_LICENSING","REQUEST_TERMINATE_INTEGRATION","REQUEST_STOP_MATLAB","REQUEST_START_MATLAB","RECEIVE_SET_LICENSING","RECEIVE_TERMINATE_INTEGRATION","RECEIVE_STOP_MATLAB","RECEIVE_START_MATLAB","RECEIVE_ERROR","getFetchAbortController","selectMatlabPending","setTriggerPosition","x","y","type","setTutorialHidden","hidden","setOverlayVisibility","visibility","requestServerStatus","fetchAbortController","receiveServerStatus","status","dispatch","getState","previousMatlabPending","requestSetLicensing","receiveSetLicensing","requestTerminateIntegration","receiveTerminateIntegration","loadUrl","requestStopMatlab","receiveStopMatlab","requestStartMatlab","receiveStartMatlab","receiveError","error","fetchServerStatus","abort","abortController","AbortController","res","fetch","signal","data","json","e","fetchSetLicensing","info","method","mode","cache","credentials","headers","body","JSON","stringify","fetchUnsetLicensing","fetchTerminateIntegration","fetchStopMatlab","fetchStartMatlab"],"mappings":"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","sourcesContent":["// Copyright 2020 The MathWorks, Inc.\n\nimport {\n    SET_TRIGGER_POSITION,\n    SET_TUTORIAL_HIDDEN,\n    SET_OVERLAY_VISIBILITY,\n    REQUEST_SERVER_STATUS,\n    RECEIVE_SERVER_STATUS,\n    REQUEST_SET_LICENSING,\n    REQUEST_TERMINATE_INTEGRATION,\n    REQUEST_STOP_MATLAB,\n    REQUEST_START_MATLAB,\n    RECEIVE_SET_LICENSING,\n    RECEIVE_TERMINATE_INTEGRATION,\n    RECEIVE_STOP_MATLAB,\n    RECEIVE_START_MATLAB,\n    RECEIVE_ERROR\n} from '../actions';\nimport { getFetchAbortController, selectMatlabPending } from '../selectors';\n\nexport function setTriggerPosition(x, y) {\n    return {\n        type: SET_TRIGGER_POSITION,\n        x,\n        y\n    };\n}\n\nexport function setTutorialHidden(hidden) {\n    return {\n        type: SET_TUTORIAL_HIDDEN,\n        hidden\n    };\n}\n\nexport function setOverlayVisibility(visibility) {\n    return {\n        type: SET_OVERLAY_VISIBILITY,\n        visibility\n    };\n}\n\nexport function requestServerStatus(fetchAbortController) {\n    return {\n        type: REQUEST_SERVER_STATUS,\n        fetchAbortController\n    };\n}\n\nexport function receiveServerStatus(status) {\n    return function (dispatch, getState) {\n        return dispatch({\n            type: RECEIVE_SERVER_STATUS,\n            status,\n            previousMatlabPending: selectMatlabPending(getState())\n        });\n    }\n}\n\nexport function requestSetLicensing(fetchAbortController) {\n    return {\n        type: REQUEST_SET_LICENSING,\n        fetchAbortController\n    };\n}\n\nexport function receiveSetLicensing(status) {\n    return {\n        type: RECEIVE_SET_LICENSING,\n        status\n    };\n}\n\nexport function requestTerminateIntegration(fetchAbortController) {\n    return {\n        type: REQUEST_TERMINATE_INTEGRATION,\n        fetchAbortController\n    };\n}\n\nexport function receiveTerminateIntegration(status) {\n    return {\n        type: RECEIVE_TERMINATE_INTEGRATION,\n        status,\n        loadUrl: '../'\n    };\n}\n\nexport function requestStopMatlab(fetchAbortController) {\n    return {\n        type: REQUEST_STOP_MATLAB,\n        fetchAbortController\n    };\n}\n\nexport function receiveStopMatlab(status) {\n    return {\n        type: RECEIVE_STOP_MATLAB,\n        status\n    };\n}\n\nexport function requestStartMatlab(fetchAbortController) {\n    return {\n        type: REQUEST_START_MATLAB,\n        fetchAbortController\n    };\n}\n\nexport function receiveStartMatlab(status) {\n    return {\n        type: RECEIVE_START_MATLAB,\n        status\n    };\n}\n\n// TODO Probably no need for multiple actions/action creators for fetch\n// failures?\nexport function receiveError(error) {\n    return {\n        type: RECEIVE_ERROR,\n        error\n    };\n}\n\nexport function fetchServerStatus() {\n    return async function (dispatch, getState) {\n\n        // Abort any previous request which is in-flight\n        getFetchAbortController(getState()).abort();\n\n        // Create new AbortController\n        const abortController = new AbortController();\n\n        // Set this request as in-flight\n        dispatch(requestServerStatus(abortController));\n\n        try {\n            const res = await fetch('./get_status', {\n                signal: abortController.signal\n            });\n            const data = await res.json();\n            return dispatch(receiveServerStatus(data));\n        } catch (e) {\n            dispatch(\n                receiveError('Communication with server failed.')\n            );\n        }\n\n    }\n}\n\nexport function fetchSetLicensing(info) {\n    return async function (dispatch, getState) {\n\n        // Abort any previous request which is in-flight\n        getFetchAbortController(getState()).abort();\n\n        // Create new AbortController\n        const abortController = new AbortController();\n\n        // Set this request as in-flight\n        dispatch(requestSetLicensing(abortController));\n\n        try {\n            const res = await fetch('./set_licensing_info', {\n                method: 'PUT',\n                mode: 'same-origin',\n                cache: 'no-cache',\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(info),\n                signal: abortController.signal\n            });\n            const data = await res.json();\n            return dispatch(receiveSetLicensing(data));\n        } catch (e) {\n            dispatch(\n                receiveError('Communication with server failed.')\n            );\n        }\n\n    }\n}\n\nexport function fetchUnsetLicensing() {\n    return async function (dispatch, getState) {\n\n        // Abort any previous request which is in-flight\n        getFetchAbortController(getState()).abort();\n\n        // Create new AbortController\n        const abortController = new AbortController();\n\n        // Set this request as in-flight\n        dispatch(requestSetLicensing(abortController));\n\n        try {\n            const res = await fetch('./set_licensing_info', {\n                method: 'DELETE',\n                mode: 'same-origin',\n                cache: 'no-cache',\n                credentials: 'same-origin',\n                signal: abortController.signal\n            });\n            const data = await res.json();\n            return dispatch(receiveSetLicensing(data));\n        } catch (e) {\n            dispatch(\n                receiveError('Communication with server failed.')\n            );\n        }\n\n    }\n}\n\nexport function fetchTerminateIntegration() {\n    return async function (dispatch, getState) {\n\n        // Abort any previous request which is in-flight\n        getFetchAbortController(getState()).abort();\n\n        // Create new AbortController\n        const abortController = new AbortController();\n\n        // Set this request as in-flight\n        dispatch(requestTerminateIntegration(abortController));\n\n        try {\n            const res = await fetch('./terminate_integration', {\n                method: 'DELETE',\n                mode: 'same-origin',\n                cache: 'no-cache',\n                credentials: 'same-origin',\n                signal: abortController.signal\n            });\n            const data = await res.json();\n            return dispatch(receiveTerminateIntegration(data));\n        } catch (e) {\n            dispatch(\n                receiveError('Communication with server failed.')\n            );\n        }\n\n    }\n}\n\nexport function fetchStopMatlab() {\n    return async function (dispatch, getState) {\n\n        // Abort any previous request which is in-flight\n        getFetchAbortController(getState()).abort();\n\n        // Create new AbortController\n        const abortController = new AbortController();\n\n        // Set this request as in-flight\n        dispatch(requestStopMatlab(abortController));\n\n        try {\n            const res = await fetch('./stop_matlab', {\n                method: 'DELETE',\n                mode: 'same-origin',\n                cache: 'no-cache',\n                credentials: 'same-origin',\n                signal: abortController.signal\n            });\n            const data = await res.json();\n            return dispatch(receiveStopMatlab(data));\n        } catch (e) {\n            dispatch(\n                receiveError('Communication with server failed.')\n            );\n        }\n\n    }\n}\n\nexport function fetchStartMatlab() {\n    return async function (dispatch, getState) {\n\n        // Abort any previous request which is in-flight\n        getFetchAbortController(getState()).abort();\n\n        // Create new AbortController\n        const abortController = new AbortController();\n\n        // Set this request as in-flight\n        dispatch(requestStartMatlab(abortController));\n\n        try {\n            const res = await fetch('./start_matlab', {\n                method: 'PUT',\n                mode: 'same-origin',\n                cache: 'no-cache',\n                credentials: 'same-origin',\n                signal: abortController.signal,\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({}),\n            });\n            const data = await res.json();\n            return dispatch(receiveStartMatlab(data));\n        } catch (e) {\n            dispatch(\n                receiveError('Communication with server failed.')\n            );\n        }\n\n    }\n}"]},"metadata":{},"sourceType":"module"}