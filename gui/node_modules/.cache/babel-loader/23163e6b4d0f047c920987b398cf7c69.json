{"ast":null,"code":"var _jsxFileName = \"/scale_wlg_persistent/filesets/project/nesi99999/Callum/jupyter-matlab-proxy/gui/src/components/OverlayTrigger/index.js\",\n    _s = $RefreshSig$();\n\n// Copyright 2020 The MathWorks, Inc.\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Draggable from 'react-draggable';\nimport ReactTooltip from 'react-tooltip';\nimport Overlay from '../Overlay';\nimport { selectInformationDetails, selectTriggerPosition, selectTutorialHidden, selectOverlayVisible } from '../../selectors';\nimport { setTriggerPosition, setTutorialHidden, setOverlayVisibility } from '../../actionCreators';\nimport './OverlayTrigger.css';\n\nfunction OverlayTrigger() {\n  _s();\n\n  const dispatch = useDispatch();\n  const triggerPosition = useSelector(selectTriggerPosition);\n  const [dragging, setDragging] = useState(false);\n  const triggerRef = useRef(); // Observe trigger position and react to it appearing offscreen\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) => {\n      if (!entry.isIntersecting) {\n        dispatch(setTriggerPosition(window.innerWidth / 2 + 27, 0));\n      }\n    });\n    observer.observe(triggerRef.current);\n    return () => {\n      observer.disconnect();\n    };\n  }, [dispatch]);\n  const overlayVisible = useSelector(selectOverlayVisible);\n  const toggleOverlayVisible = useCallback(() => dispatch(setOverlayVisibility(!overlayVisible)), [overlayVisible, dispatch]);\n  const tutorialHidden = useSelector(selectTutorialHidden);\n  const details = useSelector(selectInformationDetails);\n  const onDrag = useCallback((event, data) => {\n    setDragging(true);\n    dispatch(setTriggerPosition(data.x, data.y));\n  }, [dispatch, setDragging]);\n  const onStop = useCallback((event, data) => {\n    setDragging(false);\n    dispatch(setTriggerPosition(data.x, data.y));\n  }, [dispatch, setDragging]); // Blank overlay to use when moving the icon because iframes swallow events\n  // if not masked\n\n  const blankOverlay = dragging ? /*#__PURE__*/React.createElement(Overlay, {\n    transparent: true\n  }) : null;\n\n  const handleCloseTutorial = () => {\n    dispatch(setTutorialHidden(true));\n  };\n\n  const tutorial = tutorialHidden ? null : /*#__PURE__*/React.createElement(\"div\", {\n    id: \"trigger-tutorial\",\n    className: \"trigger-tutorial modal-content\"\n  }, /*#__PURE__*/React.createElement(\"p\", null, \"To control the MATLAB session (for example to restart or sign out), click the \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"icon-custom-trigger icon trigger-tutorial-icon\",\n    title: \"tools icon\"\n  }), \" icon.\"), /*#__PURE__*/React.createElement(\"p\", null, \"The color of the badge shows the MATLAB status.\"), /*#__PURE__*/React.createElement(\"p\", null, \"To position this widget anywhere on screen, click and drag the \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"drag-handle icon\",\n    title: \"grab handle icon\"\n  }), \" icon.\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn_color_blue pull-right\",\n    onClick: handleCloseTutorial\n  }, \"Close\"));\n  const tooltip = tutorialHidden ? /*#__PURE__*/React.createElement(ReactTooltip, {\n    id: \"trigger-button-tooltip\",\n    place: \"bottom\",\n    type: \"info\",\n    effect: \"solid\"\n  }) : null;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, blankOverlay, /*#__PURE__*/React.createElement(Draggable, {\n    position: triggerPosition,\n    onDrag: onDrag,\n    onStop: onStop,\n    handle: \".card-body\",\n    bounds: \"parent\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: triggerRef,\n    className: `card alert-${details.alert}`\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\"\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"drag-handle\",\n    className: \"drag-handle\"\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"trigger-btn\",\n    onClick: toggleOverlayVisible,\n    onMouseDown: e => e.stopPropagation(),\n    \"aria-label\": \"Menu\",\n    \"data-for\": \"trigger-button-tooltip\",\n    \"data-tip\": \"Open the Jupyter MATLAB integration settings\"\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"icon-custom-trigger\"\n  }))), tutorial)), tooltip);\n}\n\n_s(OverlayTrigger, \"P/b+X8qjCMmSM3xw1dM+qW/TKnk=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = OverlayTrigger;\nexport default OverlayTrigger;\n\nvar _c;\n\n$RefreshReg$(_c, \"OverlayTrigger\");","map":{"version":3,"sources":["/scale_wlg_persistent/filesets/project/nesi99999/Callum/jupyter-matlab-proxy/gui/src/components/OverlayTrigger/index.js"],"names":["React","useState","useCallback","useRef","useEffect","useSelector","useDispatch","Draggable","ReactTooltip","Overlay","selectInformationDetails","selectTriggerPosition","selectTutorialHidden","selectOverlayVisible","setTriggerPosition","setTutorialHidden","setOverlayVisibility","OverlayTrigger","dispatch","triggerPosition","dragging","setDragging","triggerRef","observer","IntersectionObserver","entry","isIntersecting","window","innerWidth","observe","current","disconnect","overlayVisible","toggleOverlayVisible","tutorialHidden","details","onDrag","event","data","x","y","onStop","blankOverlay","handleCloseTutorial","tutorial","tooltip","alert","e","stopPropagation"],"mappings":"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","sourcesContent":["// Copyright 2020 The MathWorks, Inc.\n\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Draggable from 'react-draggable';\nimport ReactTooltip from 'react-tooltip';\nimport Overlay from '../Overlay';\nimport {\n    selectInformationDetails,\n    selectTriggerPosition,\n    selectTutorialHidden,\n    selectOverlayVisible\n} from '../../selectors';\nimport {\n    setTriggerPosition,\n    setTutorialHidden,\n    setOverlayVisibility\n} from '../../actionCreators';\nimport './OverlayTrigger.css';\n\nfunction OverlayTrigger() {\n    const dispatch = useDispatch();\n    const triggerPosition = useSelector(selectTriggerPosition);\n    const [dragging, setDragging] = useState(false);\n    const triggerRef = useRef();\n\n    // Observe trigger position and react to it appearing offscreen\n    useEffect(() => {\n        const observer = new IntersectionObserver(\n            ([entry]) => {\n                if (!entry.isIntersecting) {\n                    dispatch(setTriggerPosition(window.innerWidth / 2 + 27, 0));\n                }\n            }\n        );\n        observer.observe(triggerRef.current);\n        return () => {\n            observer.disconnect();\n        };\n    }, [dispatch]);\n\n    const overlayVisible = useSelector(selectOverlayVisible);\n\n    const toggleOverlayVisible = useCallback(\n        () => dispatch(setOverlayVisibility(!overlayVisible)),\n        [overlayVisible, dispatch]\n    );\n\n    const tutorialHidden = useSelector(selectTutorialHidden);\n\n    const details = useSelector(selectInformationDetails);\n\n    const onDrag = useCallback(\n        (event, data) => {\n            setDragging(true);\n            dispatch(setTriggerPosition(data.x, data.y));\n        },\n        [dispatch, setDragging]\n    );\n\n    const onStop = useCallback(\n        (event, data) => {\n            setDragging(false);\n            dispatch(setTriggerPosition(data.x, data.y))\n\n        },\n        [dispatch, setDragging]\n    );\n\n    // Blank overlay to use when moving the icon because iframes swallow events\n    // if not masked\n    const blankOverlay = dragging ? <Overlay transparent={true}/> : null;\n\n    const handleCloseTutorial = () => {\n        dispatch(setTutorialHidden(true));\n    };\n\n    const tutorial = tutorialHidden ? null : (\n        <div id=\"trigger-tutorial\" className=\"trigger-tutorial modal-content\">\n            <p>To control the MATLAB session (for example to restart or sign out), click the <span className=\"icon-custom-trigger icon trigger-tutorial-icon\" title=\"tools icon\"/> icon.</p>\n            <p>The color of the badge shows the MATLAB status.</p>\n            <p>To position this widget anywhere on screen, click and drag the <span className=\"drag-handle icon\" title=\"grab handle icon\"/> icon.</p>\n            <button className=\"btn btn_color_blue pull-right\" onClick={handleCloseTutorial}>Close</button>\n        </div>\n    );\n\n    const tooltip = tutorialHidden ? (\n        <ReactTooltip\n                id=\"trigger-button-tooltip\"\n                place=\"bottom\"\n                type=\"info\"\n                effect=\"solid\"\n            />\n        ) : null;\n\n    return (\n        <>\n            {blankOverlay}\n            <Draggable\n                position={triggerPosition}\n                onDrag={onDrag}\n                onStop={onStop}\n                handle=\".card-body\"\n                bounds=\"parent\"\n            >\n                <div\n                    ref={triggerRef}\n                    className={`card alert-${details.alert}`}\n                >\n                    <div className=\"card-body\">\n                        <span id=\"drag-handle\" className=\"drag-handle\"></span>\n                        <button\n                            type=\"button\"\n                            className=\"trigger-btn\"\n                            onClick={toggleOverlayVisible}\n                            onMouseDown={e => e.stopPropagation()}\n                            aria-label=\"Menu\"\n                            data-for=\"trigger-button-tooltip\"\n                            data-tip=\"Open the Jupyter MATLAB integration settings\"\n                        >\n                            <span className=\"icon-custom-trigger\"></span>\n                        </button>\n                    </div>\n                    {tutorial}\n                </div>\n            </Draggable>\n            {tooltip}\n        </>\n    );\n}\n\nexport default OverlayTrigger;\n"]},"metadata":{},"sourceType":"module"}