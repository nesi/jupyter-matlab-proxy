{"ast":null,"code":"var _jsxFileName = \"/scale_wlg_persistent/filesets/project/nesi99999/Callum/jupyter-matlab-proxy/gui/src/components/App/index.js\",\n    _s = $RefreshSig$();\n\n// Copyright 2020 The MathWorks, Inc.\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useInterval } from 'react-use';\nimport './App.css';\nimport Confirmation from '../Confirmation';\nimport OverlayTrigger from '../OverlayTrigger';\nimport Overlay from '../Overlay';\nimport MatlabJsd from '../MatlabJsd';\nimport LicensingGatherer from '../LicensingGatherer';\nimport Controls from '../Controls';\nimport Information from '../Information';\nimport Help from '../Help';\nimport Error from '../Error';\nimport { selectOverlayVisible, selectFetchStatusPeriod, selectHasFetchedServerStatus, selectLicensingProvided, selectMatlabUp, selectError, selectLoadUrl, selectIsConnectionError } from '../../selectors';\nimport { setOverlayVisibility, fetchServerStatus } from '../../actionCreators';\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  const overlayVisible = useSelector(selectOverlayVisible);\n  const fetchStatusPeriod = useSelector(selectFetchStatusPeriod);\n  const hasFetchedServerStatus = useSelector(selectHasFetchedServerStatus);\n  const licensingProvided = useSelector(selectLicensingProvided);\n  const matlabUp = useSelector(selectMatlabUp);\n  const error = useSelector(selectError);\n  const loadUrl = useSelector(selectLoadUrl);\n  const isConnectionError = useSelector(selectIsConnectionError);\n  const toggleOverlayVisible = useCallback(() => dispatch(setOverlayVisibility(!overlayVisible)), [overlayVisible, dispatch]);\n  const [dialogModel, setDialogModel] = useState(null);\n  let dialog;\n\n  if (dialogModel) {\n    const closeHandler = () => setDialogModel(null);\n\n    const dismissAllHandler = () => {\n      closeHandler();\n      toggleOverlayVisible(false);\n    };\n\n    switch (dialogModel.type) {\n      case 'confirmation':\n        const confirm = () => {\n          dispatch(dialogModel.callback());\n          setDialogModel(null);\n        };\n\n        dialog = /*#__PURE__*/React.createElement(Confirmation, {\n          confirm: confirm,\n          cancel: closeHandler\n        }, dialogModel.message || '');\n        break;\n\n      case 'help':\n        dialog = /*#__PURE__*/React.createElement(Help, {\n          closeHandler: closeHandler,\n          dismissAllHandler: dismissAllHandler\n        });\n        break;\n\n      default:\n        throw new Error(`Unknown dialog type: ${dialogModel.type}.`);\n    }\n  }\n\n  if (isConnectionError) {\n    dialog = /*#__PURE__*/React.createElement(Error, {\n      message: \"Either this integration terminated or the session ended\"\n    }, /*#__PURE__*/React.createElement(\"p\", null, \"Attempt to \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"../\"\n    }, \"return to a parent app\")));\n  } else if (error && error.type === \"MatlabInstallError\") {\n    dialog = /*#__PURE__*/React.createElement(Error, {\n      message: error.message\n    });\n  } // Initial fetch server status\n\n\n  useEffect(() => {\n    if (!hasFetchedServerStatus) {\n      dispatch(fetchServerStatus());\n    }\n  }, [dispatch, hasFetchedServerStatus]); // Periodic fetch server status\n\n  useInterval(() => {\n    dispatch(fetchServerStatus());\n  }, fetchStatusPeriod); // Load URL\n\n  useEffect(() => {\n    if (loadUrl !== null) {\n      window.location.href = loadUrl;\n    }\n  }, [loadUrl]); // Display one of:\n  // * Confirmation\n  // * Help\n  // * Error\n  // * License gatherer\n  // * Status\n\n  let overlayContent;\n\n  if (dialog) {\n    // TODO Inline confirmation component build\n    overlayContent = dialog;\n  } else if (hasFetchedServerStatus && !licensingProvided) {\n    overlayContent = /*#__PURE__*/React.createElement(LicensingGatherer, null);\n  } else if (licensingProvided && !dialog) {\n    overlayContent = /*#__PURE__*/React.createElement(Information, {\n      closeHandler: toggleOverlayVisible\n    }, /*#__PURE__*/React.createElement(Controls, {\n      callback: args => setDialogModel(args)\n    }));\n  }\n\n  const overlay = overlayVisible ? /*#__PURE__*/React.createElement(Overlay, null, overlayContent) : null; // FIXME Until https://github.com/http-party/node-http-proxy/issues/1342\n  // is addressed, use a direct URL in development mode. Once that is\n  // fixed, the request will be served by the fake MATLAB Embedded Connector\n  // process in development mode\n\n  const matlabUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:31515/index-jsd-cr.html' : './index-jsd-cr.html';\n  const matlabJsd = matlabUp ? /*#__PURE__*/React.createElement(MatlabJsd, {\n    url: matlabUrl\n  }) : null;\n  const overlayTrigger = overlayVisible ? null : /*#__PURE__*/React.createElement(OverlayTrigger, null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"app\",\n    className: \"main\"\n  }, overlayTrigger, matlabJsd, overlay);\n}\n\n_s(App, \"HcK/yOh+jDoLi6apSvBcTS0wwM0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useInterval];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/scale_wlg_persistent/filesets/project/nesi99999/Callum/jupyter-matlab-proxy/gui/src/components/App/index.js"],"names":["React","useState","useCallback","useEffect","useSelector","useDispatch","useInterval","Confirmation","OverlayTrigger","Overlay","MatlabJsd","LicensingGatherer","Controls","Information","Help","Error","selectOverlayVisible","selectFetchStatusPeriod","selectHasFetchedServerStatus","selectLicensingProvided","selectMatlabUp","selectError","selectLoadUrl","selectIsConnectionError","setOverlayVisibility","fetchServerStatus","App","dispatch","overlayVisible","fetchStatusPeriod","hasFetchedServerStatus","licensingProvided","matlabUp","error","loadUrl","isConnectionError","toggleOverlayVisible","dialogModel","setDialogModel","dialog","closeHandler","dismissAllHandler","type","confirm","callback","message","window","location","href","overlayContent","args","overlay","matlabUrl","process","env","NODE_ENV","matlabJsd","overlayTrigger"],"mappings":"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","sourcesContent":["// Copyright 2020 The MathWorks, Inc.\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useInterval } from 'react-use';\nimport './App.css';\nimport Confirmation from '../Confirmation';\nimport OverlayTrigger from '../OverlayTrigger';\nimport Overlay from '../Overlay';\nimport MatlabJsd from '../MatlabJsd';\nimport LicensingGatherer from '../LicensingGatherer';\nimport Controls from '../Controls';\nimport Information from '../Information';\nimport Help from '../Help';\nimport Error from '../Error';\nimport {\n    selectOverlayVisible,\n    selectFetchStatusPeriod,\n    selectHasFetchedServerStatus,\n    selectLicensingProvided,\n    selectMatlabUp,\n    selectError,\n    selectLoadUrl,\n    selectIsConnectionError,\n} from '../../selectors';\nimport {\n    setOverlayVisibility,\n    fetchServerStatus\n} from '../../actionCreators';\n\nfunction App() {\n    const dispatch = useDispatch();\n\n    const overlayVisible = useSelector(selectOverlayVisible);\n    const fetchStatusPeriod = useSelector(selectFetchStatusPeriod);\n    const hasFetchedServerStatus = useSelector(selectHasFetchedServerStatus);\n    const licensingProvided = useSelector(selectLicensingProvided);\n    const matlabUp = useSelector(selectMatlabUp);\n    const error = useSelector(selectError);\n    const loadUrl = useSelector(selectLoadUrl);\n    const isConnectionError = useSelector(selectIsConnectionError);\n\n    const toggleOverlayVisible = useCallback(\n        () => dispatch(setOverlayVisibility(!overlayVisible)),\n        [overlayVisible, dispatch]\n    );\n\n    const [dialogModel, setDialogModel] = useState(null);\n\n    let dialog;\n    if (dialogModel) {\n        const closeHandler = () => setDialogModel(null);\n        const dismissAllHandler = () => {\n            closeHandler();\n            toggleOverlayVisible(false);\n        };\n        switch (dialogModel.type) {\n            case 'confirmation':\n                const confirm = () => {\n                    dispatch(dialogModel.callback());\n                    setDialogModel(null);\n                };\n                dialog = (\n                    <Confirmation\n                        confirm={confirm}\n                        cancel={closeHandler}>\n                        {dialogModel.message || ''}\n                    </Confirmation>\n                );\n                break;\n            case 'help':\n                dialog = (\n                    <Help\n                        closeHandler={closeHandler}\n                        dismissAllHandler={dismissAllHandler}\n                    />);\n                break;\n            default:\n                throw new Error(`Unknown dialog type: ${dialogModel.type}.`);\n        }\n    }\n    if (isConnectionError) {\n        dialog = (\n            <Error\n                message=\"Either this integration terminated or the session ended\"\n            >\n                <p>Attempt to <a href=\"../\">return to a parent app</a></p>\n            </Error>\n        );\n    } else if (error && error.type === \"MatlabInstallError\") {\n        dialog = <Error message={error.message} />;\n    }\n\n    // Initial fetch server status\n    useEffect(() => {\n        if (!hasFetchedServerStatus) {\n            dispatch(fetchServerStatus());\n        }\n    }, [dispatch, hasFetchedServerStatus]);\n\n    // Periodic fetch server status\n    useInterval(() => {\n        dispatch(fetchServerStatus());\n    }, fetchStatusPeriod);\n\n    // Load URL\n    useEffect(() => {\n        if (loadUrl !== null) {\n            window.location.href = loadUrl;\n        }\n    }, [loadUrl]);\n\n    // Display one of:\n    // * Confirmation\n    // * Help\n    // * Error\n    // * License gatherer\n    // * Status\n    let overlayContent;\n    if (dialog) {\n        // TODO Inline confirmation component build\n        overlayContent = dialog;\n    } else if (hasFetchedServerStatus && (!licensingProvided)) {\n        overlayContent = <LicensingGatherer />;\n    } else if (licensingProvided && !dialog) {\n        overlayContent = (\n            <Information closeHandler={toggleOverlayVisible}>\n                <Controls callback={args => setDialogModel(args)}/>\n            </Information>\n        );\n    }\n\n    const overlay = overlayVisible ? (\n        <Overlay>\n            {overlayContent}\n        </Overlay>\n    ) : null;\n\n    // FIXME Until https://github.com/http-party/node-http-proxy/issues/1342\n    // is addressed, use a direct URL in development mode. Once that is\n    // fixed, the request will be served by the fake MATLAB Embedded Connector\n    // process in development mode\n    const matlabUrl = process.env.NODE_ENV === 'development'\n        ? 'http://localhost:31515/index-jsd-cr.html'\n        : './index-jsd-cr.html';\n\n    const matlabJsd = matlabUp ? (\n        <MatlabJsd url={matlabUrl} />\n    ) : null;\n\n    const overlayTrigger = overlayVisible ? null : <OverlayTrigger />;\n\n    return (\n        <div data-testid=\"app\" className=\"main\">\n            {overlayTrigger}\n            {matlabJsd}\n            {overlay}\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}